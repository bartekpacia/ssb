#!/bin/sh

set -euo pipefail

function usage
{
	echo \
		"Usage: $0 [-d|-g|-h|-r] [-e HEADER_PATH] [-f FOOTER_PATH]" \
		"[-m MD_RENDERER] [-o OUTPUT_DIR] [-p POSTS_DIR]"
}


function parse_optargs
{
	while getopts "dghre:f:m:o:p:" opt; do
		case $opt in
			d)
				DISABLE_POSTS=true;;
			g)
				gen_template
				exit 0;;
			h)
				usage
				exit 0;;
			r)
				RECURSE_POSTS=true;;
			e)
				HEADER_PATH=$OPTARG;;
			f)
				FOOTER_PATH=$OPTARG;;
			m)
				MD_RENDERER=$OPTARG;;
			o)
				OUTPUT_DIR=$OPTARG;;
			p)
				POSTS_DIR=$OPTARG;;
		esac
	done
}


function set_default_args
{
	DISABLE_POSTS=false
	RECURSE_POSTS=false

	HEADER_PATH=./header.html
	FOOTER_PATH=./footer.html
	MD_RENDERER=pandoc
	OUTPUT_DIR=.
	POSTS_DIR=./posts
}

function echo_header_template
{
	echo \
'<!DOCTYPE html>
<html lang=en>
<head>
	<meta charset="utf-8">

	<title>Title</title>

	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" type="text/css" href="styles.css">
</head>

<body>
<header>
<nav>
	<strong>Title</strong>
	<a href="./index.html">home</a>
	<a href="mailto:">email</a>
</nav>
</header>
'
}


function echo_footer_template
{
	echo \
'<footer>
	Created with <a href="https://github.com/maciejzj/ssb">ssb</a> – a simple
	static blogger.
</footer>
</body>
</html>'
}


function echo_css_template
{
	echo \
'body { max-width: 40em; margin: auto; padding: 1.5em }
header { font-size: 1.2em; }
footer { text-align: right; }
nav { }
h1 { }
h2 { }
h3 { }
h4 { }
h5 { }
h6 { }
p { }
a { }
li { }
ul { }
ol { }
dl { }
dt { }
dd { }
hr { }
figure { }
figcaption { }
img { }
video { }
table { }
th { }
tr { }
td { }
blockquote { }
pre { }

img, video { width: 100%; }
pre { max-width: 100%; overflow-x: auto; }
table{ max-width: 100%; overflow-x: auto; display: block; }

@media only screen and (max-width: 600px)
{
	body { }
}

code span.al { color: #ff0000; font-weight: bold; }
/* Annotation */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; }
/* Attribute */
code span.at { color: #7d9029; }
/* BaseN */
code span.bn { color: #40a070; }
/* BuiltIn */
code span.bu { }
/* ControlFlow */
code span.cf { color: #007020; font-weight: bold; }
/* Char */
code span.ch { color: #4070a0; }
/* Constant */
code span.cn { color: #880000; }
/* Comment */
code span.co { color: #60a0b0; font-style: italic; }
/* CommentVar */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; }
/* Documentation */
code span.do { color: #ba2121; font-style: italic; }
/* DataType */
code span.dt { color: #902000; }
/* DecVal */
code span.dv { color: #40a070; }
/* Error */
code span.er { color: #ff0000; font-weight: bold; }
/* Extension */
code span.ex { }
/* Float */
code span.fl { color: #40a070; }
/* Function */
code span.fu { color: #06287e; }
/* Import */
code span.im { }
/* Information */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; }
/* Keyword */
code span.kw { color: #007020; font-weight: bold; }
/* Operator */
code span.op { color: #666666; }
/* Other */
code span.ot { color: #007020; }
/* Preprocessor */
code span.pp { color: #bc7a00; }
/* SpecialChar */
code span.sc { color: #4070a0; }
/* SpecialString */
code span.ss { color: #bb6688; }
/* String */
code span.st { color: #4070a0; }
/* Variable */
code span.va { color: #19177c; }
/* VerbatimString */
code span.vs { color: #4070a0; }
/* Warning */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; }'
}


function gen_template
{
	echo_header_template > ./header.html
	echo_footer_template > ./footer.html
	echo_css_template > ./styles.css
}


function get_posts
{
	if [ "$RECURSE_POSTS" = false ]; then
		DEPTH_LIMITER="-maxdepth 1"
	else
		DEPTH_LIMITER=""
	fi

	find $POSTS_DIR $DEPTH_LIMITER -type f -name "*.md"
}


function get_mod_date
{
	case `uname` in
		Linux)
			stat -c %y "$1" | cut -d ' ' -f 1;;
		Darwin|*BSD)
			stat -t "%Y-%m-%d" -f "%Sm" "$1";;
	esac
}


function append_posts_list
{
	posts_list=""
	for post in $@; do
		file_base=`basename $post .md`
		date=`get_mod_date "$post"`
		post_title=`grep -m 1 "^# .*" $post | cut -c 3-`
		post_link="$date – [$post_title]($file_base.html)<br>\n"
		posts_list="$posts_list$post_link"
	done
	echo "\n---\n"
	echo $posts_list | sort -r
}


function make_html_files
{
	for md_file in $@; do
		file_base=`basename $md_file .md`
		output_file="$OUTPUT_DIR/${file_base}.html"
		tempf=`mktemp`
		trap "rm $tempf" 0 2 3 15
		append_posts_list $posts | cat $md_file - | $MD_RENDERER > $tempf
	    cat $HEADER_PATH $tempf $FOOTER_PATH | tee $output_file
	done
}


set_default_args
parse_optargs $@
shift `expr $OPTIND - 1`

posts=""
pages="$@"
[ -z "$pages" ] && echo No markdown pages given to render && exit 1
[ $DISABLE_POSTS != true ] && posts=`get_posts`
md_files="$pages $posts"

make_html_files $md_files
